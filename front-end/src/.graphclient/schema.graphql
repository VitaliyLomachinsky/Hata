schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

"""
8 bytes signed integer

"""
scalar Int8

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Price {
  id: Bytes!
  price: BigInt!
  blockTimestamp: BigInt!
}

input Price_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  price: BigInt
  price_not: BigInt
  price_gt: BigInt
  price_lt: BigInt
  price_gte: BigInt
  price_lte: BigInt
  price_in: [BigInt!]
  price_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Price_filter]
  or: [Price_filter]
}

enum Price_orderBy {
  id
  price
  blockTimestamp
}

type Property {
  id: Bytes!
  isActive: Boolean
  propertyID: Bytes!
  landlord: Bytes!
  location: String!
  area: Int!
  previewCID: String!
  price: BigInt
  payment: Int
}

input Property_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  propertyID: Bytes
  propertyID_not: Bytes
  propertyID_gt: Bytes
  propertyID_lt: Bytes
  propertyID_gte: Bytes
  propertyID_lte: Bytes
  propertyID_in: [Bytes!]
  propertyID_not_in: [Bytes!]
  propertyID_contains: Bytes
  propertyID_not_contains: Bytes
  landlord: Bytes
  landlord_not: Bytes
  landlord_gt: Bytes
  landlord_lt: Bytes
  landlord_gte: Bytes
  landlord_lte: Bytes
  landlord_in: [Bytes!]
  landlord_not_in: [Bytes!]
  landlord_contains: Bytes
  landlord_not_contains: Bytes
  location: String
  location_not: String
  location_gt: String
  location_lt: String
  location_gte: String
  location_lte: String
  location_in: [String!]
  location_not_in: [String!]
  location_contains: String
  location_contains_nocase: String
  location_not_contains: String
  location_not_contains_nocase: String
  location_starts_with: String
  location_starts_with_nocase: String
  location_not_starts_with: String
  location_not_starts_with_nocase: String
  location_ends_with: String
  location_ends_with_nocase: String
  location_not_ends_with: String
  location_not_ends_with_nocase: String
  area: Int
  area_not: Int
  area_gt: Int
  area_lt: Int
  area_gte: Int
  area_lte: Int
  area_in: [Int!]
  area_not_in: [Int!]
  previewCID: String
  previewCID_not: String
  previewCID_gt: String
  previewCID_lt: String
  previewCID_gte: String
  previewCID_lte: String
  previewCID_in: [String!]
  previewCID_not_in: [String!]
  previewCID_contains: String
  previewCID_contains_nocase: String
  previewCID_not_contains: String
  previewCID_not_contains_nocase: String
  previewCID_starts_with: String
  previewCID_starts_with_nocase: String
  previewCID_not_starts_with: String
  previewCID_not_starts_with_nocase: String
  previewCID_ends_with: String
  previewCID_ends_with_nocase: String
  previewCID_not_ends_with: String
  previewCID_not_ends_with_nocase: String
  price: BigInt
  price_not: BigInt
  price_gt: BigInt
  price_lt: BigInt
  price_gte: BigInt
  price_lte: BigInt
  price_in: [BigInt!]
  price_not_in: [BigInt!]
  payment: Int
  payment_not: Int
  payment_gt: Int
  payment_lt: Int
  payment_gte: Int
  payment_lte: Int
  payment_in: [Int!]
  payment_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Property_filter]
  or: [Property_filter]
}

enum Property_orderBy {
  id
  isActive
  propertyID
  landlord
  location
  area
  previewCID
  price
  payment
}

type Query {
  price(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Price
  prices(
    skip: Int = 0
    first: Int = 100
    orderBy: Price_orderBy
    orderDirection: OrderDirection
    where: Price_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Price!]!
  property(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Property
  properties(
    skip: Int = 0
    first: Int = 100
    orderBy: Property_orderBy
    orderDirection: OrderDirection
    where: Property_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Property!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  price(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Price
  prices(
    skip: Int = 0
    first: Int = 100
    orderBy: Price_orderBy
    orderDirection: OrderDirection
    where: Price_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Price!]!
  property(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Property
  properties(
    skip: Int = 0
    first: Int = 100
    orderBy: Property_orderBy
    orderDirection: OrderDirection
    where: Property_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Property!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}